// v3 app.js: includes manual add & review (same as v2 logic)
const state = { sessionId:"", slabs:[], statusMap:new Map(), rowIndex:[], deferredPrompt:null };
function makeRowKey(idx, slab){ return `${idx}::${slab.combined_id}`; }
function makeSessionId(){ const d=new Date(),p=n=>String(n).padStart(2,"0"); return `${d.getFullYear()}-${p(d.getMonth()+1)}-${p(d.getDate())}-${p(d.getHours())}${p(d.getMinutes())}-bellagio`; }
async function loadCSV(path){ const r=await fetch(path,{cache:'no-store'}); return parseCSV(await r.text()); }
function parseCSV(t){ const L=t.replace(/\r\n/g,"\n").replace(/\r/g,"\n").split("\n").filter(Boolean); const H=splitCSVLine(L[0]); const R=[]; for(let i=1;i<L.length;i++){ const row=splitCSVLine(L[i]); const o={}; H.forEach((h,idx)=>o[h]=(row[idx]??"").trim()); R.push(o);} return R; }
function splitCSVLine(l){ const o=[]; let c="",q=false; for(let i=0;i<l.length;i++){ const ch=l[i]; if(ch=='"'){ if(q&&l[i+1]=='"'){c+='"';i++;} else q=!q; } else if(ch==','&&!q){ o.push(c); c=""; } else c+=ch; } o.push(c); return o; }
function buildIndex(slabs){ state.rowIndex = slabs.map((s,i)=>({ key:makeRowKey(i,s), combined_id:s.combined_id||"", material_name:s.material_name||"", size_mm:s.size_mm||"", thickness_mm:s.thickness_mm||"", source:s.source||"master", slab:s })); state.statusMap.clear(); for(const r of state.rowIndex) state.statusMap.set(r.key,"Untouched"); }
function renderCounters(){ let a=0,u=0; for(const v of state.statusMap.values()){ if(v==="Available") a++; if(v==="Used") u++; } document.getElementById("count-available").textContent=`Slabs available: ${a}`; document.getElementById("count-used").textContent=`Slabs used: ${u}`; }
function searchRows(q){ const s=(q||"").trim().toLowerCase(); if(!s) return []; const isId=/[0-9]+(\/?[0-9]+)?$/.test(s); return state.rowIndex.filter(r=> isId ? r.combined_id.toLowerCase().includes(s) : r.material_name.toLowerCase().includes(s)).slice(0,100); }
function resultRow(row){ const d=document.createElement("div"); d.className="result"; const i=document.createElement("div"); i.className="info"; const n=document.createElement("div"); n.className="name"; n.textContent=row.material_name||"—"; const m=document.createElement("div"); m.className="meta"; m.textContent=`${row.combined_id||"—"} • ${row.size_mm||"?"} • ${row.thickness_mm||"?"}mm${row.source==="manual"?" • manual":""}`; i.appendChild(n); i.appendChild(m); const b=document.createElement("button"); b.textContent="Mark Available"; b.addEventListener("click",()=>markAvailable(row.key)); if(state.statusMap.get(row.key)==="Available"){ b.disabled=true; b.textContent="✓ Available"; } d.appendChild(i); d.appendChild(b); return d; }
function renderSearchResults(rows){ const c=document.getElementById("results"); c.innerHTML=""; rows.forEach(r=> c.appendChild(resultRow(r))); }
function addToList(listId,key,type){ const r=state.rowIndex.find(x=>x.key===key); const ul=document.getElementById(listId); if(ul.querySelector(`[data-key="${CSS.escape(key)}"]`)) return; const li=document.createElement("li"); li.dataset.key=key; li.innerHTML=`<span><strong>${r.material_name||"—"}</strong> <span class="badge ${type}">${r.combined_id}</span> <span class="badge">${r.size_mm||"?"} • ${r.thickness_mm||"?"}mm</span> ${r.source==="manual"?'<span class="badge">manual</span>':''}</span><span>${type==="available"?'<button class="ghost" data-action="used">Mark Used</button>':'<button class="ghost" data-action="available">Mark Available</button>'} <button class="ghost" data-action="remove">Un-tick</button></span>`; ul.appendChild(li); li.querySelectorAll("button").forEach(b=> b.addEventListener("click",()=>{ const a=b.dataset.action; if(a==="remove"){ li.remove(); state.statusMap.set(key,"Untouched"); renderCounters(); refreshReview(); return; } if(a==="used"){ markUsed(key); refreshReview(); } if(a==="available"){ markAvailable(key); refreshReview(); } })); }
function removeFromList(listId,key){ const ul=document.getElementById(listId); const el=ul.querySelector(`[data-key="${CSS.escape(key)}"]`); if(el) el.remove(); }
function markAvailable(key){ state.statusMap.set(key,"Available"); addToList("list-available",key,"available"); removeFromList("list-used",key); renderCounters(); const s=document.getElementById("search"); s.focus(); s.select(); refreshResultsIfVisible(); }
function markUsed(key){ state.statusMap.set(key,"Used"); addToList("list-used",key,"used"); removeFromList("list-available",key); renderCounters(); refreshResultsIfVisible(); }
function computeUsedIfUntouched(){ for(const r of state.rowIndex){ if(state.statusMap.get(r.key)==="Untouched"){ state.statusMap.set(r.key,"Used"); addToList("list-used",r.key,"used"); } } renderCounters(); }
function exportCSV(rows, headers, name){ const esc=v=>{ const s=(v==null?"":String(v)); return /[",\n]/.test(s)?`"${s.replace(/"/g,'""')}"`:s; }; const data=[headers.join(",")].concat(rows.map(r=> headers.map(h=>esc(r[h])).join(","))).join("\n"); const blob=new Blob([data],{type:"text/csv;charset=utf-8;"}); const url=URL.createObjectURL(blob); const a=document.createElement("a"); a.href=url; a.download=`${name}.csv`; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url); }
function finishSession(){ computeUsedIfUntouched(); const available=[],used=[],manualAdd=[]; for(const r of state.rowIndex){ const status=state.statusMap.get(r.key); const base={session_id:state.sessionId,timestamp:new Date().toISOString(),combined_id:r.combined_id,material_name:r.material_name,size_mm:r.size_mm,thickness_mm:r.thickness_mm,status,source:r.source}; if(status==="Available") available.push(base); if(status==="Used") used.push(base); if(r.source==="manual") manualAdd.push({combined_id:r.combined_id,material_name:r.material_name,size_mm:r.size_mm,thickness_mm:r.thickness_mm,notes:r.slab?.notes||""}); } const headers=["session_id","timestamp","combined_id","material_name","size_mm","thickness_mm","status","source"]; exportCSV(available, headers, `${state.sessionId}-available`); exportCSV(used, headers, `${state.sessionId}-used`); if(manualAdd.length) exportCSV(manualAdd, ["combined_id","material_name","size_mm","thickness_mm","notes"], `${state.sessionId}-manual-additions`); document.getElementById("finishBtn").disabled=true; document.getElementById("search").disabled=true; }
function resetSession(){ state.statusMap.clear(); buildIndex(state.slabs); document.getElementById("list-available").innerHTML=""; document.getElementById("list-used").innerHTML=""; document.getElementById("results").innerHTML=""; document.getElementById("finishBtn").disabled=false; document.getElementById("search").disabled=false; renderCounters(); const s=document.getElementById("search"); s.focus(); s.select(); refreshReview(); }
function wireInstall(){ window.addEventListener('beforeinstallprompt', e=>{ e.preventDefault(); state.deferredPrompt=e; const btn=document.getElementById("installBtn"); btn.hidden=false; btn.addEventListener("click", async()=>{ btn.hidden=true; state.deferredPrompt?.prompt(); await state.deferredPrompt?.userChoice; state.deferredPrompt=null; }, {once:true}); }); }
function openAddModal(){ document.getElementById("addSlabModal").showModal(); document.querySelector("#addSlabForm input[name=combined_id]").focus(); }
function addManualSlab(ev){ ev?.preventDefault(); const f=document.getElementById("addSlabForm"); const d=new FormData(f); const slab={ combined_id:(d.get("combined_id")||"").trim(), material_name:(d.get("material_name")||"").trim(), size_mm:(d.get("size_mm")||"").trim(), thickness_mm:(d.get("thickness_mm")||"").trim(), notes:(d.get("notes")||"").trim(), source:"manual" }; if(!slab.combined_id || !slab.material_name){ alert("Combined ID and Material are required."); return; } state.slabs.push(slab); buildIndex(state.slabs); const rowKey=state.rowIndex[state.rowIndex.length-1].key; markAvailable(rowKey); document.getElementById("addSlabModal").close(); f.reset(); }
function openReview(){ refreshReview(); document.getElementById("reviewModal").showModal(); document.getElementById("reviewSearch").focus(); }
function refreshReview(){ const q=(document.getElementById("reviewSearch")?.value||"").toLowerCase().trim(); const c=document.getElementById("reviewList"); if(!c) return; c.innerHTML=""; const rows=state.rowIndex.filter(r=> state.statusMap.get(r.key)==="Available"); rows.forEach(r=>{ if(q){ const id=r.combined_id.toLowerCase(), name=r.material_name.toLowerCase(); if(!(id.includes(q)||name.includes(q))) return; } const div=document.createElement("div"); div.className="review-item"; div.innerHTML=`<span><strong>${r.material_name||"—"}</strong> <span class="badge available">${r.combined_id}</span> <span class="badge">${r.size_mm||"?"} • ${r.thickness_mm||"?"}mm</span> ${r.source==="manual"?'<span class="badge">manual</span>':''}</span><span><button class="ghost" data-action="used" data-key="${r.key}">Mark Used</button><button class="ghost" data-action="untick" data-key="${r.key}">Un-tick</button></span>`; c.appendChild(div); }); c.querySelectorAll("button").forEach(b=>{ const key=b.dataset.key, act=b.dataset.action; b.addEventListener("click", ()=>{ if(act==="used"){ markUsed(key); refreshReview(); } if(act==="untick"){ state.statusMap.set(key,"Untouched"); removeFromList("list-available",key); renderCounters(); refreshReview(); } }); }); }
function refreshResultsIfVisible(){ const s=document.getElementById("search").value; if(s) renderSearchResults(searchRows(s)); }
async function init(){ try{ state.sessionId=makeSessionId(); document.getElementById("session-id").textContent=state.sessionId; state.slabs=await loadCSV("./data/slabs.csv"); buildIndex(state.slabs); renderCounters(); }catch(err){ console.error(err); alert("Failed to load data/slabs.csv. Please ensure the file exists."); } const search=document.getElementById("search"); search.addEventListener("input", ()=> renderSearchResults(searchRows(search.value))); search.addEventListener("keydown", (e)=>{ if(e.key==="Enter"){ const list=searchRows(search.value); if(list[0]){ markAvailable(list[0].key); } e.preventDefault(); }}); document.getElementById("finishBtn").addEventListener("click", finishSession); document.getElementById("resetBtn").addEventListener("click", resetSession); document.getElementById("addSlabBtn").addEventListener("click", openAddModal); document.getElementById("addSlabForm").addEventListener("submit", addManualSlab); document.getElementById("reviewBtn").addEventListener("click", openReview); document.getElementById("closeReview").addEventListener("click", ()=> document.getElementById("reviewModal").close()); document.getElementById("reviewSearch").addEventListener("input", refreshReview); if('serviceWorker' in navigator){ navigator.serviceWorker.register('./service-worker.js').catch(console.error); } wireInstall(); } init();
